;;; elenv-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from elenv.el

(defconst elenv-windows (memq system-type '(cygwin windows-nt ms-dos)) "\
The operating system is Microsoft Windows compatible.")
(defconst elenv-darwin (eq system-type 'darwin) "\
The operating system is GNU-Darwin compatible.")
(defconst elenv-macos elenv-darwin "\
The operating system is macOS compatible.")
(defconst elenv-linux (eq system-type 'gnu/linux) "\
The operating system is Linux compatible.")
(defconst elenv-bsd (eq system-type 'gnu/kfreebsd) "\
The operating system is BSD compatible.")
(defconst elenv-unix (memq system-type '(aix berkeley-unix hpux usg-unix-v)) "\
The operating system is Unix compatible.")
(defconst elenv-system-type (cond (elenv-windows 'dos) (elenv-macos 'mac) (elenv-linux 'unix) (elenv-bsd 'bsd) (t 'unknown)) "\
Generic system type.")
(autoload 'elenv-with-os "elenv" "\
Evaluate BODY by OS.

(fn OS &rest BODY)" nil t)
(function-put 'elenv-with-os 'lisp-indent-function 1)
(autoload 'elenv-with-windows "elenv" "\
Evaluate BODY in Windows.

(fn &rest BODY)" nil t)
(function-put 'elenv-with-windows 'lisp-indent-function 0)
(autoload 'elenv-with-macos "elenv" "\
Evaluate BODY in macOS.

(fn &rest BODY)" nil t)
(function-put 'elenv-with-macos 'lisp-indent-function 0)
(autoload 'elenv-with-linux "elenv" "\
Evaluate BODY in Linux.

(fn &rest BODY)" nil t)
(function-put 'elenv-with-linux 'lisp-indent-function 0)
(autoload 'elenv-with-bsd "elenv" "\
Evaluate BODY in BSD.

(fn &rest BODY)" nil t)
(function-put 'elenv-with-bsd 'lisp-indent-function 0)
(autoload 'elenv-with-unix "elenv" "\
Evaluate BODY in Unix.

(fn &rest BODY)" nil t)
(function-put 'elenv-with-unix 'lisp-indent-function 0)
(autoload 'elenv-if-env "elenv" "\
Evaluate THEN if VARIABLE is valid, we execute ELSE if not valid.

(fn VARIABLE THEN &rest ELSE)" nil t)
(function-put 'elenv-if-env 'lisp-indent-function 1)
(autoload 'elenv-when-env "elenv" "\
Evaluate BODY when VARIABLE is valid.

(fn VARIABLE &rest BODY)" nil t)
(function-put 'elenv-when-env 'lisp-indent-function 1)
(autoload 'elenv-unless-env "elenv" "\
Evaluate BODY when VARIABLE is valid.

(fn VARIABLE &rest BODY)" nil t)
(function-put 'elenv-unless-env 'lisp-indent-function 1)
(autoload 'elenv-if-exec "elenv" "\
Evaluate body (THEN and ELSE) if COMMAND is found.

For argument REMOTE, see function `executable-find' description.

(fn COMMAND REMOTE THEN &rest ELSE)" nil t)
(function-put 'elenv-if-exec 'lisp-indent-function 3)
(autoload 'elenv-when-exec "elenv" "\
Evaluate BODY when COMMAND is found.

For argument REMOTE, see function `executable-find' description.

(fn COMMAND REMOTE &rest BODY)" nil t)
(function-put 'elenv-when-exec 'lisp-indent-function 2)
(autoload 'elenv-unless-exec "elenv" "\
Evaluate BODY unless COMMAND is found.

For argument REMOTE, see function `executable-find' description.

(fn COMMAND REMOTE &rest BODY)" nil t)
(function-put 'elenv-unless-exec 'lisp-indent-function 2)
(defconst elenv-graphic-p (display-graphic-p) "\
Return t if graphic mode.")
(autoload 'elenv-monitor-pixel-width "elenv" "\
Return the pixel width from physical monitor by FRAME.

(fn &optional FRAME)")
(autoload 'elenv-monitor-pixel-height "elenv" "\
Return the pixel height from physical monitor by FRAME.

(fn &optional FRAME)")
(autoload 'elenv-monitor-vertical-p "elenv" "\
Return non-nil if currently on a vertical display.")
(autoload 'elenv-monitor-horizontal-p "elenv" "\
Return non-nil if currently on a horizontal display.")
(defconst elenv-daemon-p (daemonp) "\
Return t if daemon mode.")
(autoload 'elenv-debugging-p "elenv" "\
Return non-nil when debugging.")
(autoload 'elenv-with-no-redisplay "elenv" "\
Execute BODY without any redisplay execution.

(fn &rest BODY)" nil t)
(function-put 'elenv-with-no-redisplay 'lisp-indent-function 0)
(autoload 'elenv-push "elenv" "\
Push NEWELT to the ahead or back of SEQ.

(fn NEWELT SEQ)" nil t)
(autoload 'elenv-file-contents "elenv" "\
Return FILENAME's contents.

(fn FILENAME)")
(autoload 'elenv-shell-execute "elenv" "\
Return non-nil if CMD executed succesfully with ARGS.

(fn CMD &rest ARGS)")
(autoload 'elenv-move-path "elenv" "\
Move PATH to DEST.

(fn PATH DEST)")
(autoload 'elenv-buffer-use-spaces-p "elenv" "\
Return t if the buffer use spaces instead of tabs.")
(autoload 'elenv-buffer-name-or-file-name "elenv" "\
Return BUF's function `buffer-file-name' or `buffer-name' respectively.

(fn &optional BUF)")
(autoload 'elenv-char-displayable-p "elenv" "\
Same as function `char-displayable-p' but accept CH as string.

(fn CH)")
(autoload 'elenv-replace-nondisplayable "elenv" "\
Replace non-displayable character from STR.

Optional argument REP is the replacement string of non-displayable character.

(fn STR &optional REP)")
(autoload 'elenv-choose-char "elenv" "\
Choose a character from the list ARGS.

(fn &rest ARGS)")
(autoload 'elenv-2str "elenv" "\
Convert OBJ to string.

(fn OBJ)")
(autoload 'elenv-frame-util-p "elenv" "\
Return non-nil if FRAME is an utility frame.

(fn &optional FRAME)")
(autoload 'elenv-goto-line "elenv" "\
Goto LN line number.

(fn LN)")
(autoload 'elenv-save-excursion "elenv" "\
Re-implementation `save-excursion' in BODY.

(fn &rest BODY)" nil t)
(function-put 'elenv-save-excursion 'lisp-indent-function 0)
(autoload 'elenv-walk-windows "elenv" "\
See function `walk-windows' description for arguments FUN, MINIBUF and
ALL-FRAMES.

(fn FUN &optional MINIBUF ALL-FRAMES)")
(autoload 'elenv-save-window-excursion "elenv" "\
Execute BODY without touching window's layout/settings.

(fn &rest BODY)" nil t)
(function-put 'elenv-save-window-excursion 'lisp-indent-function 0)
(register-definition-prefixes "elenv" '("elenv-"))

;;; End of scraped data

(provide 'elenv-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; elenv-autoloads.el ends here
